#!/bin/bash
set -e
shopt -s inherit_errexit

#slib
declare slib=$(cat << 'EOF'
#
# SLIB - here document string
#

#Readme
declare readme=$(cat << EOS
#
# ALAZIF Mincraft Server Environment - How to use
#

#Explain:
# When using the server command, attach with the following command.

#Prior knowledge:
# This suite of tools is based on "screen","systemd" and "ufw".
# Therefore, it inherits these operations.
# "Confname" serves as the destination for commands to act on.
#
# example
# When working with live.conf. - live
# or test                      - test

#Running Server CLI:
# sudo -u [username] screen -r mc[confname]
# or
# screen -r mc[confname]

# Press C-a,C-d to exit the server screen.
# Check the "screen" command for other operations.

#Server backup:
# When reload is executed, it will automatically stop after
# executing the all-save command, and then save the world
# data backup. It will automatically reboot after saving.

#Save file location:
# ./[confname]/world_backup/

#Daemon Server control:
# sudo systemctl [start | stop | reload | status] minecraft

#Systemd register:
# sudo systemctl [enable | disable] minecraft

#Systemd unit file location:
# /etc/systemd/system/minecraft-[confname].server
EOS
)

#Generate the unitfile
unitgen(){
local unitfile=$(sudo cat << EOS
#
# unitfile - here document string
#
[Unit]
Description=Minecraft Server Service("${NAME}")

[Service]
Type=forking
User=${USR}
WorkingDirectory=`pwd`/"${NAME}"
ExecStart=/bin/bash -c "`pwd`/run.sh ${NAME} start"
ExecStop=/bin/bash -c "`pwd`/run.sh ${NAME} stop"
ExecReload=/bin/bash -c "`pwd`/run.sh ${NAME} reload"
TimeoutStopSec=200
Restart=always
RestartSec=10s

[Install]
WantedBy=multi-user.target

#END OF FILE
EOS
)
echo "${unitfile}" > "minecraft-$1.service"
}

#runconf
run_confgen(){
local runconf=$(cat << EOS
#
# runconf - here document string
#
# Configuration data used in wizards.
# Direct editing is not recommended.
# Conf name
NAME="$1"
# Java command location
JRE="$2"
# Server application file name
JAR="$3"
# Server application arguments
ARG="$4"
# Execution user
USR="$5"
# Connection port
PORT="$6"
# Wait time (seconds) when the server is stopped
WAIT="$7"
# Copy source
CPSRC="$8"
# Availability of daemon operation
DAEMON="$9"

#END OF FILE
EOS
)
echo "${runconf}" > ./conf/"$1".conf
}

#SLIB END OF FILE
EOF
)

#lib
declare lib=$(cat << 'EOF'
#
# LIB - here document string
#

#autoport
auto_port(){
	min=$1; max=$2; i=$min
	while true; do
		_IFS=$IFS; IFS=$'\n'
		port_test=$(echo | sudo netstat -apn | grep :$i)
		IFS=$_IFS
		if [ -z "${port_test[0]}" ]; then
			echo $i
			exit
		fi
		echo -e "$i is used in\n${port_test[@]}" 1>&2
		if [ $i -eq $max ]; then echo "No free port found." 1>&2; exit; fi
		i=$(($i+1))
	done
}

#Generate the environment
envgen(){
	source ./conf/"$1".conf
	local home sudoer
	home=`pwd`; sudoer="sudo -u ${USR}"
	$sudoer mkdir $home/${NAME}
	$sudoer mkdir $home/${NAME}/world_backup
	$sudoer cp ${JAR} $home/${NAME}
	cd $home/${NAME}
	java -jar $home/${NAME}/${JAR}
	sed -i -e "s/false/true/" "$home/${NAME}/eula.txt"
}

apt_list_installer(){
	local -n ref="$1"
	echo -e "->Install apt list." 1>&2
	for val in "${ref[@]}"; do
		sudo apt install "${val}" 1>&2
	done
}

allay_numbered_display(){
    local -n ref
    local title
    ref="$1"; title="$2"
	echo -e "\nAll $title version.\n" 1>&2
	for val in "${ref[@]}"; do
		echo "${val}" 1>&2
	done
	echo 1>&2
}

#Works only when IFS is \n.
parse_apt_list_output(){
	local word opt
	word="$1"; opt="$2"
	if [ "$IFS" != $'\n' ]; then echo "set IFS to '\n'." >&2; exit 1; fi
	echo | apt list $opt 2>/dev/null | grep $word | nl -w 1 -s ' : '
}

get_package_names(){
	local str=${1%/*}
	str=${str##* }
	echo $str
}

#Provides an installation dialog for apt packages.
#Parse the arguments
apt_install_dialog(){
	while getopts fht:w: opt; do
		case "$opt" in
		t)
			local title="${OPTARG}"
			;;
		w)
			local word="${OPTARG}"
		esac
	done
	_IFS=$IFS; IFS=$'\n'
	local list=($(parse_apt_list_output $word))
	local _list=($(parse_apt_list_output $word --installed))
	IFS=$_IFS
	local len="${#list[@]}"
	local _len="${#_list[@]}"
	if [ $len -gt $_len ]; then
		allay_numbered_display list $title
		read -ep "Want to install another version? Press Skip on Enter. : " i
		if [[ $i -gt 0 ]]; then
			if [[ $i -gt $len ]]; then echo "Invalid number,skip installation." 1>&2; return 0; fi
			i=$(($i-1))
			echo $(get_package_names "${list[$i]}")
			return 0
		else
			echo "skip $title installation." 1>&2
			return 0
		fi
	else
		if [ 0 -eq $_len ]; then echo $(get_package_names "${list[0]}");return 0 ; fi
	fi
	echo "$title is already installed." 1>&2
}

jar_fetch(){
	local path res ret
	while getopts 'f:u:w:' fetch; do
		case "${fetch}" in
		f)
			local file=${OPTARG}
			if [ -n "$usr" ]; then
				if [ ! -f $file ] || [[ `basename $file` != *.jar ]]; then break; fi
				path=`dirname $file`
				if [ ${CONF}!=$path ]; then cp $file ${CONF}; fi
				ret=`basename $file`
				break
			fi
			;;
		u)
			local usr=${OPTARG}
			if [ -n "$url" ]; then
				res=$(curl -Iso /dev/null $url -w "%{http_code}")
				if [ $res -ne 200 ] || [[ `basename $url` != *.jar ]]; then break; fi
				sudo -u $usr wget $url --quiet
				ret=`basename $url`
				break
			fi
			if [ -n "$file" ]; then
				if [ ! -f $file ] || [[ `basename $file` != *.jar ]]; then break; fi
				path `dirname $file`
				if [ ${CONF}!=$path ]; then cp $file $dir; fi
				ret=`basename $file`
				break
			fi
			;;
		w)
			local url=${OPTARG}
			if [ -n "$usr" ]; then
				res=$(curl -Iso /dev/null $url -w "%{http_code}")
				if [ $res -ne 200 ] || [[ `basename $url` != *.jar ]]; then break; fi
				sudo -u $usr wget $url --quiet
				ret=`basename $url`
				break
			fi
			;;
		esac
	done

	if [ -n "$ret" ]; then echo $ret; else exit 1; fi
}

make_new_dir(){
	local str
	while true; do
		read -ep "Enter the new directory name. : " str
		if [ -z "$str" ]; then continue; fi
		if [ ! -d $str ]; then
			read -ep "create a new directory?[Y/n] : " yn
			case $yn in
			[Yy])
				mkdir $str
				echo $str
				break
				;;
			[Nn])
				echo "Invalid path." 1>&2
				break
				;;
			*)
				echo "Enter y or n." 1>&2
			esac
		else
			echo $str
			break
		fi
	done
}

#Use directory dialog
dir_dialog(){
	local ret
	while true; do
		read -ep "Use current directory?[Y/n] : " yn
		case $yn in
		[Yy])
			echo `pwd`
			break
			;;
		[Nn])
			ret=`make_new_dir`
			if [ -z $ret ]; then return 1; fi
			echo `pwd`/$ret
			break
			;;
		*)
			echo 'Enter y or n.' 1>&2
		esac
	done
}

#Conf name
conf_name_dialog(){
	local name
	while true; do
		read -ep "Enter conf name. : " name
		if [ -n $name ]; then
			if [ ! -d ./conf/$name.conf ]; then
				echo $name
				break
			else
				echo "Name already in use." 1>&2
			fi
		fi
	done
}

#Copy source
copy_source_dialog(){
	local cpsrc
	while true; do
		read -ep "Enter copy source, blank to default. : " cpsrc
		if [ -n "$cpsrc" ]; then
			if [ ! -f $cpsrc ]; then echo $cpsrc; break; fi
			echo "Source does not exist." 1>&2
		else
			echo "Create without copying." 1>&2
			break
		fi
	done
}

#Availability of daemon operation
daemon_dialog(){
	while true; do
		read -ep "Make it a Daemon?[Y/n] : " yn
		case $yn in
		[Yy])
			echo "true"
			break
			;;
		[Nn])
			echo "false"
			break
			;;
		*) echo "Enter y or n." 1>&2
		esac
	done
}

#Execution user
user_dialog(){
	local usr
	while true; do
		read -n1 -e -p "Use current user ? blank to default. : " usr
		if [ -z "$usr" ]; then
			echo "Use current user." 1>&2
			echo `whoami`
			break
		else
			if [ -n `getent passwd $usr` ]; then
				break
			else
				echo "invalid username." 1>&2
			fi
		fi
	done
}

#Java command location
java_command_dialog(){
	local jre
	while true; do
		read -n1 -ep "Use current JRE ? blank to default. : " jre
		if [ -z "$jre" ]; then
			echo "Use current JRE." 1>&2
			echo ${JRE}
			break
		else
			if [ -f $jre ]; then
				echo $jre
				break
			else
				echo "invalid path." 1>&2
			fi
		fi
	done
}

#Server application file name
server_jar_dialog(){
	local usr url jar file
	usr="$1"
	while true; do
		read -ep "Download server jar file?[Y/n] : " yn
		case $yn in
		[Yy])
			while true; do
				read -ep "Enter the URL of the server jar. : " url
				jar="$(jar_fetch -u $usr -w $url)"
				if [ -n "$jar" ]; then
					echo $jar
					break
				else
					echo "invalid URL." 1>&2
				fi
			done
			break
			;;
		[Nn])
			while true; do
				read -ep "Enter full path of server jar. : " file
				jar=`jar_fetch -u $usr -f $file`
				if [ -n "$jar" ]; then
					echo $jar
					break
				else
					echo "invalid path." 1>&2
				fi
			done
			break
			;;
		*)
			echo 'Enter y or n.' 1>&2
		esac
	done
}

#Option
option_dialog(){
	local arg
	read -ep "Enter the jar option, blank to default. : " arg
	if [ -n "$arg" ]; then echo $arg; return; fi
	echo "Use Defalut Option." 1>&2
	echo ${ARG}
}

#Connection port
port_dialog(){
	local port
	while true; do
		read -ep "Enter connection port, blank to Auto. : " port
		if [ -n "$port" ]; then
			port_test=$(auto_port $port $port)
			if [ -n "$port_test" ]; then
				echo $port
				break
			fi
		else
			echo "Auto." 1>&2
			echo "$(auto_port ${PORT_MIN} ${PORT_MAX})"
			break
		fi
	done
}

#Wait time (seconds) when the server is stopped
wait_dialog(){
	local wait
	read -ep "Enter number of seconds to pause, blank to default. : " wait
	if [ -n "$wait" ]; then echo $wait; return; fi
	echo "Use default." 1>&2
	echo ${WAIT}
}

server_start(){
	local sudoer
	sudoer="$1"
    $sudoer screen -dmS mc${NAME} ${JRE} ${ARG} -jar $home/${NAME}/${JAR} --port ${PORT}
}

server_holt(){
	local evalcmd
	evalcmd="$1"
    $evalcmd stuff "say Stop the server for maintenance.Get ready now."'\015'
    sleep 1
    $evalcmd stuff "say '${WAIT}'s left."'\015'
    sleep ${WAIT}
    $evalcmd stuff "save_all"'\015'
    $evalcmd quit
}

server_backup(){
	local home sudoer bkdir
	sudoer="$1"; home="$2"
	bkdir=$home/${NAME}/world_backup/`date "+%Y%m%d%H"`
    $sudoer mkdir $bkdir
    $sudoer cp -ar $home/${NAME}/world/ $bkdir/
    $sudoer cp -ar $home/${NAME}/world_nether/ $bkdir/
    $sudoer cp -ar $home/${NAME}/world_the_end/ $bkdir/
}

run_core(){
	source ./conf/"$1".conf
	local psgrep sudoer home
	psgrep=`ps a | grep ${JAR} | grep -v grep`
	sudoer="sudo -u ${USR}"; home=`pwd`

	cd $home/${NAME}
	case "$2" in
	    start)
	        server_start "$sudoer";;
	    stop)
	        server_holt "$sudoer screen -S mc${NAME} -X";;
	    reload)
	        server_holt "$sudoer screen -S mc${NAME} -X"
	        server_backup "$sudoer" "$home"
	        server_start "$sudoer";;
	    backup)
	        if [[ -z $psgrep ]]; then
	            server_backup "$sudoer" "$home"
	        else
	            echo "now running." 1>&2
	        fi;;
	    *)
	        echo "start | stop | reload | backup" 1>&2
	esac
}

#LIB END OF FILE
EOF
)

#confconf.sh
confconf=$(cat << 'EOF'
#!/bin/bash
#
# confconf.sh - here document string
#
set -e

#guard syntax
if [ ! -f ./core/conf ]; then echo "Current Directory is not HOME." 1>&2; exit 1;fi
source ./core/conf
source ./core/slib
source ./core/lib

on_error(){
	echo "[Err] ${BASH_SOURCE[1]}:${BASH_LINENO} - '${BASH_COMMAND}' failed" 1>&2
	exit
}
trap on_error ERR

while getopts n:c:d:u:j:s:a:p:w: opt; do
	case "$opt" in
	n)
		name="${OPTARG}"
		;;
	c)
		cpsrc="${OPTARG}"
		;;
	d)
		daemon="${OPTARG}"
		;;
	u)
		usr="${OPTARG}"
		;;
	j)
		jre="${OPTARG}"
		;;
	s)
		jar="${OPTARG}"
		;;
	a)
		arg="${OPTARG}"
		;;
	p)
		port="${OPTARG}"
		;;
	w)
		wait="${OPTARG}"
	esac
done

cat << EOS
*
* confconf.sh - RunScript Config Wizard
*
EOS

if [ -z $name ]; then name="$(conf_name_dialog)"; echo; fi
if [ -z $cpsrc ]; then cpsrc="$(copy_source_dialog)"; echo; fi
if [ -z $daemon ]; then daemon="$(daemon_dialog)"; echo; fi
if [ -z $usr ]; then usr="$(user_dialog)"; echo; fi
if [ -z $jre ]; then jre="$(java_command_dialog)"; echo; fi
if [ -z $jar ]; then jar="$(server_jar_dialog $usr)"; echo; fi
if [ -z $arg ]; then arg="$(option_dialog)"; echo; fi
if [ -z $port ]; then port="$(port_dialog)"; echo; fi
if [ -z $wait ]; then wait="$(wait_dialog)"; echo; fi

#last check
cat << EOS
	Create a config file with the following settings.

		        NAME : $name
		         JRE : $jre
		         JAR : $jar
		         ARG : $arg
		        USER : $usr
		        PORT : $port
		        WAIT : $wait
		       CPSRC : $cpsrc
		      DAEMON : $daemon

EOS

while true; do
	read -ep "Make this?[Y/n]: " yn
	case $yn in
	[Yy])
		echo -e '\nOK.\n'
		break
		;;
	[Nn])
		echo -e '\nAbort.\n'
		exit
		;;
	*)
		echo -e '\nEnter y or n.\n'
	esac
done

run_confgen "$name" "$jre" "$jar" "$arg" "$usr" "$port" "$wait" "$cpsrc" "$daemon"

#confconf.sh END OF FILE
EOF
)

#mcmake.sh
mcmake=$(cat << 'EOF'
#!/bin/bash
#
# mcmake.sh - here document string
#
set -e

#guard syntax
if [ ! -f ./core/conf ]; then echo "Current Directory is not HOME." 1>&2; exit 1;fi
if [ ! -f ./conf/"$1".conf ]; then echo "$1.conf is not found."; exit; fi
source ./conf/"$1".conf
source ./core/slib
source ./core/lib

on_error(){
	echo "[Err] ${BASH_SOURCE[1]}:${BASH_LINENO} - '${BASH_COMMAND}' failed" 1>&2
	exit
}
trap on_error ERR

cat << EOS
*
* mcmake.sh - Make Server Environment
*
EOS
case "$2" in #Make environment.
create) #Create environment.
	echo -e "\n->Create environment"
	if [ -n "${PARENT}" ]; then
		sudo -u $USR cp -r ${CPSRC} `pwd`
	else
		envgen "$1"
	fi
	;;
delete) #Delete environment.
	echo -e "\n->Delete environment"
	if [ ! -d ./"$1" ]; then echo "./$1 is not found."; exit; fi
	rm -r ./"$1"
	;;
--);; #Through option.
*)
	echo "create | delete | --"
	exit
esac


case "$3" in #Register/Unregister systemd.
on)	#Register with systemd.
	echo -e "\n->Register systemd" 1>&2
	if "${DAEMON}"; then
		if [ -f /etc/systemd/system/minecraft-"$1".service ]; then exit; fi
		unitgen "$1"
		sudo mv minecraft-"$1".service /etc/systemd/system/
		sudo systemctl enable minecraft-"$1"
		sudo systemctl daemon-reload
	else
		echo "Daemon is set to false." 1>&2
	fi
	;;
off) #Unregister systemd.
	echo -e "\n->Unregister sytemd" 1>&2
	if "${DAEMON}"; then
		if [ -f /etc/systemd/system/minecraft-"$1".service ]; then exit; fi
		sudo rm /etc/systemd/system/minecraft-"$1".service
		sudo systemctl daemon-reload
	else
		echo "Daemon is set to false." 1>&2
	fi
	;;
reload) #Reload systemd.
	echo -e "\n->Reload systemd" 1>&2
	if "${DAEMON}"; then
		unitgen "$1"
		sudo mv minecraft-"$1".service /etc/systemd/system/
		sudo systemctl daemon-reload
	else
		echo "Daemon is set to false." 1>&2
	fi
	;;
--);; #Through option
*)
	echo "on | off | reload | --" 1>&2
	exit
esac

case "$4" in #Open/Close port
open) #Open port
	echo -e "\n->Open port" 1>&2
	sudo ufw allow ${PORT}/tcp;;
close) #Close port
	echo -e "\n->Close port" 1>&2
	sudo ufw delete allow ${PORT}/tcp;;
--);; #Through option
*)
	echo "open | close | --" 1>&2
esac

#mcmake.sh END OF FILE
EOF
)

#run.sh
run=$(cat << 'EOF'
#!/bin/bash
#
# run.sh - here document string
#
set -e

#guard syntax
if [ ! -f ./core/conf ]; then echo "Current Directory is not HOME." 1>&2; exit 1;fi
source ./core/lib

on_error(){
	echo "[Err] ${BASH_SOURCE[1]}:${BASH_LINENO} - '${BASH_COMMAND}' failed" 1>&2
	exit
}
trap on_error ERR

if [ -f ./conf/"$1".conf ]; then
	if [ -d ./"$1" ]; then
		run_core "$1" "$2"
	else
		echo "/$1 is not found."
	fi
else
	echo ".conf file is not found."
fi

#run.sh END OF FILE
EOF
)

#piph
cat << 'EOF' >> piph
#!/bin/bash
set -e
shopt -s inherit_errexit

EOF
#piph END OF FILE

#pipb
cat << 'EOF' >> pipb
#Title
declare title=$(cat << EOS
MincraftServer Deploy Tool

     .S_SSSs    S.       .S_SSSs     sdSSSSSSSbs   .S    sSSs
    .SS~SSSSS   SS.     .SS~SSSSS    YSSSSSSSS%S  .SS   d%%SP
    S%S   SSSS  S%S     S%S   SSSS          S%S   S%S  d%S'
    S%S    S%S  S%S     S%S    S%S         S&S    S%S  S%S
    S%S SSSS%S  S&S     S%S SSSS%S        S&S     S&S  S&S
    S&S  SSS%S  S&S     S&S  SSS%S        S&S     S&S  S&S_Ss
    S&S    S&S  S&S     S&S    S&S       S&S      S&S  S&S~SP
    S&S    S&S  S&S     S&S    S&S      S*S       S&S  S&S
    S*S    S&S  S*b     S*S    S&S     S*S        S*S  S*b
    S*S    S*S  S*S.    S*S    S*S   .s*S         S*S  S*S
    S*S    S*S   SSSbs  S*S    S*S   sY*SSSSSSSP  S*S  S*S
    SSS    S*S    YSSP  SSS    S*S  sY*SSSSSSSSP  S*S  S*S
           SP                  SP                 SP   SP
           Y                   Y                  Y    Y

                                                      for bash
                 Installation preparation start
                        C-c to cancel

EOS
)

#ResetScreen
alreset(){
	clear
	echo "$title"
}

#EndScript
alend(){
cat << EOS

Initial setting is completed,
please read readme.txt for operation method.

EOS
read -p "Enter to exit."
clear
}

#Config file
confgen(){
local conf=$(cat << EOS
#
# conf - here document string
#
CONF=`pwd`
JRE='`which java`'
ARG='-Xms2G -Xmx4G'
PORT_MIN=50000
PORT_MAX=60000
WAIT=30

#END OF FILE
EOS
)
echo "${conf}" > core/conf
}

#start up
start_up(){
	local -a APT_LIST
	local -r LIB="lib"
	local -r SLIB="slib"
	local -r CONF="conf"
	local org

	org=`pwd`
	echo "*First boot setting*"
	echo "${!LIB}" > $LIB
	source ./$LIB
	home=$(dir_dialog)
	mkdir $home/conf $home/core
	mv ./$LIB $home/core
	mv ./pip $home/core
	mv ./pipb $home/core
	mv ./piph $home/core
	mv ./pipf $home/core
	echo "${!SLIB}" > $home/core/$SLIB

	cd $home
	source ./core/$LIB
	source ./core/$SLIB
	confgen
	echo "$confconf" > confconf.sh
	echo "$mcmake" > mcmake.sh
	echo "$run" > run.sh
	chmod a+x confconf.sh
	chmod a+x mcmake.sh
	chmod a+x run.sh
	touch core/log

	alreset
	read -p "Do an availability check.Press Enter."
	APT_LIST+=(`apt_install_dialog -w jre-headless -t JRE`)
	alreset
	APT_LIST+=(`apt_install_dialog -w ^screen/ -t screen`)
	alreset
	APT_LIST+=(`apt_install_dialog -w ^ufw/ -t ufw`)
	alreset
	apt_list_installer APT_LIST

	alreset
	read -ep "Would you like to create the environment now?[Y/n] : " yn
	case $yn in
	[Yy])
		alreset
		bash confconf.sh -n ${home##*/}
		alreset
		bash mcmake.sh ${home##*/} create -- --
	esac

	alreset
	alend
	echo "$readme" > readme.txt
	cd $org
	rm alazif

}
EOF
#pipb END OF FILE

#pipf
cat << 'EOF' >> pipf
on_error(){
	echo "[Err] ${BASH_SOURCE[1]}:${BASH_LINENO} - '${BASH_COMMAND}' failed" 1>&2
	exit
}
trap on_error ERR

#guard syntax
if [ -f ./core/conf ]; then echo "It works only when you start it for the first time."; exit; fi
source ./pipb
start_up
EOF
#pipf END OF FILE

#pip
cat << 'EOF' >> pip
#!/bin/bash
#
# pip reunion
#
#guard syntax
if [ ! -f ./core/conf ]; then echo "Current Directory is not HOME." 1>&2; exit 1;fi
source ./core/conf
cat core/piph > out
echo -e '#slib\ndeclare slib=$(cat << '\''EOF'\' >> out
cat core/slib >> out
echo -e 'EOF\n)\n\n#lib\ndeclare lib=$(cat << '\''EOF'\' >> out
cat core/lib >> out
echo -e 'EOF\n)\n\n#confconf.sh\nconfconf=$(cat << '\''EOF'\' >> out
cat confconf.sh >> out
echo -e 'EOF\n)\n\n#mcmake.sh\nmcmake=$(cat << '\''EOF'\' >> out
cat mcmake.sh >> out
echo -e 'EOF\n)\n\n#run.sh\nrun=$(cat << '\''EOF'\' >> out
cat run.sh >> out
echo -e 'EOF\n)\n\n#piph\ncat << '\''EOF'\'' >> piph' >> out
cat core/piph >> out
echo -e 'EOF\n#piph END OF FILE\n\n#pipb\ncat << '\''EOF'\'' >> pipb' >> out
cat core/pipb >> out
echo -e 'EOF\n#pipb END OF FILE\n\n#pipf\ncat << '\''EOF'\'' >> pipf' >> out
cat core/pipf >> out
echo -e 'EOF\n#pipf END OF FILE\n\n#pip\ncat << '\''EOF'\'' >> pip' >> out
cat core/pip >> out
echo -e 'EOF\n#pip END OF FILE\n\n#start' >> out
cat core/pipf >> out
mv out alazif
chmod a+x alazif
cd $HOME
mv ${CONF}/alazif alazif
EOF
#pip END OF FILE

#start
on_error(){
	echo "[Err] ${BASH_SOURCE[1]}:${BASH_LINENO} - '${BASH_COMMAND}' failed" 1>&2
	exit
}
trap on_error ERR

#guard syntax
if [ -f ./core/conf ]; then echo "It works only when you start it for the first time."; exit; fi
source ./pipb
start_up
